//=============================================================================
//
// HPバー3D処理 [hpber3D.cpp]
// Author : YUTARO ABE
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "scene3D.h"		// シーン3D
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラー
#include "input.h"			// 入力
#include "camera.h"			// カメラ
#include "item.h"			// アイテム
#include "hpber3D.h"		// Hpのバー
#include "enemy.h"			// 敵

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 CHpBer3D::m_pTexture = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CHpBer3D::CHpBer3D() : CScene3D(CScene::PRIORITY_4, CScene::OBJTYPE_HPBER3D)
{
	m_bColChange = false;		// 色の変更
	m_nColFream = 0;			//	色の変更するフレーム
}

//=============================================================================
// デストラクタ
//=============================================================================
CHpBer3D::~CHpBer3D()
{
}

//=============================================================================
//	アイテムの生成
//=============================================================================
CHpBer3D *CHpBer3D::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV)
{
	CHpBer3D *pHpBer3D = {};

	if (pHpBer3D == NULL)
	{//	アイテムの生成
		pHpBer3D = new CHpBer3D;
		if (pHpBer3D != NULL)
		{//アイテムの初期化
			pHpBer3D->Init(pos, rot, size, col, TexUV);
		}
	}
	return pHpBer3D;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CHpBer3D::Init(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV)
{
	CScene3D::SetInitAll(pos, rot, size, col, TexUV, CScene3D::SCENE3DTYPE_BILLBOARD);
	CScene3D::Init();
	CScene3D::BindTexture(m_pTexture);
	m_bColChange = false;		// 色の変更
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CHpBer3D::Uninit(void)
{
	CScene3D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CHpBer3D::Update(void)
{
	D3DXCOLOR col = CScene3D::Getcol();			//	色の取得

	if (m_bColChange == true)
	{//	色を変更した場合
		m_nColFream++;			//	フレームの加算
		if (m_nColFream > 20)
		{//	フレームが指定の値を超えた場合
			col = D3DXCOLOR(0.5f, 0.5f, 0.5f, 1.0f);	//	色の変更
			m_bColChange = false;						//	色の変更
			m_nColFream = 0;							//	フレームの初期化
		}
	}
	CScene3D::Setcol(col);						//	色の設定
	CScene3D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CHpBer3D::Draw(void)
{
	CScene3D::Draw();
}
//=============================================================================
// テクスチャの読み込み
//=============================================================================
HRESULT CHpBer3D::Load(void)
{
	// デバイス取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\item\\.png", &m_pTexture);

	return S_OK;
}
//=============================================================================
// アンロード処理
//=============================================================================
void CHpBer3D::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture!= NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
// 大きさを変える
//=============================================================================
void CHpBer3D::SizeChange(int nDamage, CEnemy *m_pEnemy)
{
	D3DXVECTOR3 size = CScene3D::Getsize();		//	大きさの取得
	D3DXVECTOR3 pos = CScene3D::Getpos();		//	大きさの取得
	D3DXCOLOR col = CScene3D::Getcol();			//	色の変更
	int nLife = m_pEnemy->GetLife();			//	ライフの取得
												//	大きさ/(ライフ+ダメージ量))*ダメージ量
	float nValueA = (size.x / (nLife + nDamage))*nDamage;
	pos.x  -= nValueA;							//	ライフに応じてポリゴンの位置を変える
	size.x -= nValueA;							//	大きさをライフに応じて減らす
	if (m_bColChange == false)
	{//	色を変更していなかった場合
		col = D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f);	//	色の変更
		m_bColChange = true;
	}

	CScene3D::Setpos(pos);						//	位置の設定
	CScene3D::Setsize(size);					//	大きさの設定
	CScene3D::Setcol(col);						//	色の設定

}
