//=============================================================================
//
// セレクト処理 [selectmode.cpp]
// Author : YUTARO ABE
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "selectmode.h"		// セレクト
#include "UI.h"				// UI
#include "fade.h"			// フェイド
#include "input.h"			// インプット
#include "sound.h"			//	サウンド

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CSelectMode::CSelectMode()
{
	m_nNextCounter = 0;		//	次の画面遷移へのカウンター
}

//=============================================================================
// デストラクタ
//=============================================================================
CSelectMode::~CSelectMode()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CSelectMode::Init(void)
{
	//  Uiの読み込み
	CUI::Load(CManager::MODE_SELECTMODE);

	//	UIの生成
	CUI::CreateMode(CManager::MODE_SELECTMODE);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CSelectMode::Uninit(void)
{
	CUI::Unload();				// Uiの読み込み

	CScene::ReleaseMode();	// モード終了
}

//=============================================================================
// 更新処理
//=============================================================================
void CSelectMode::Update(void)
{
	CSound *pSound = CManager::GetSound();			//	サウンドの取得
	m_nNextCounter++;
	int nNum = CUI::GetSelectNUM();
	if (CFade::GetFade() == CFade::FADE_NONE)
	{// フェードしていない状態
		if (CManager::GetInputKeyboard()->GetTrigger(DIK_RETURN) || CManager::GetInputXPad()->GetTrigger(XINPUT_GAMEPAD_A, 0) == true)
		{
			if (nNum == 0)
			{	// ポーズ解除
				if (CFade::GetFade() == CFade::FADE_NONE)
				{
					CFade::Create(CManager::MODE_GAMETUTO, CFade::FADE_OUT, 0);
				}
			}
			else if (nNum == 1)
			{	// ゲーム画面へ
				if (CFade::GetFade() == CFade::FADE_NONE)
				{
					CFade::Create(CManager::MODE_TITLE, CFade::FADE_OUT, 0);
				}

			}
			else if (nNum == 2)
			{	//　タイトル画面へ
				if (CFade::GetFade() == CFade::FADE_NONE)
				{
					CFade::Create(CManager::MODE_TITLE, CFade::FADE_OUT, 0);
				}
			}
			pSound->PlaySound(CSound::SOUND_LABEL_SE_PRESS);	//	決定音
		}
	}
	if (m_nNextCounter > 900)
	{//	指定の値を超えた場合
		//　タイトル画面へ
		if (CFade::GetFade() == CFade::FADE_NONE)
		{
			CFade::Create(CManager::MODE_TITLE, CFade::FADE_OUT, 0);
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CSelectMode::Draw(void)
{

}