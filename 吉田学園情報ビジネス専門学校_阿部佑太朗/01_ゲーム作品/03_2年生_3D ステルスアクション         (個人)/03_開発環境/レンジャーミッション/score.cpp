//=============================================================================
//
//	スコアの処理 [score.cpp]
// Author : YUTARO ABE
//
//=============================================================================
#include "manager.h"
#include "renderer.h"
#include "score.h"
#include "number.h"

//==============================================================================
//	静的メンバ変数初期化
// ==============================================================================
CNumber *CScore::m_apNumber[MAX_SCORE] = {};
int CScore::m_nScore = NULL;

//==============================================================================
//	コンストラクタ
//==============================================================================
CScore::CScore() :CScene(PRIORITY_UI, OBJTYPE_SCORE)
{

}

//==============================================================================
//	デストラクタ
//==============================================================================
CScore::~CScore()
{

}

//==============================================================================
//	初期化処理
//==============================================================================
HRESULT CScore::Init(void)
{
	m_nScore = 0;
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{//	番号の生成
		m_apNumber[nCount] = CNumber::Create(D3DXVECTOR3(500.0f + (nCount * 30), 47.0f, 0.0f), D3DXVECTOR3(17.0f, 17.0f, 0.0f));
	}
	return S_OK;
}

//==============================================================================
//	終了処理
//==============================================================================
void CScore::Uninit(void)
{
	if (m_apNumber != NULL)
	{
		for (int nCount = 0; nCount < MAX_SCORE;nCount++)
		{//数字の開放
			m_apNumber[nCount]->Uninit();
		}
	}
	//自分自身の開放
	CScene::SetDeath();
}

//==============================================================================
//	更新処理
//==============================================================================
void CScore::Update(void)
{
}

//==============================================================================
//	描画処理
//==============================================================================
void CScore::Draw(void)
{
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{//	番号の描画
		m_apNumber[nCount]->Draw();
	}
}

//==============================================================================
//	スコアの生成処理
//==============================================================================
CScore *CScore::Create(void)
{
	CScore *pScore = {};

	if (pScore == NULL)
	{
		pScore = new CScore;			//	スコアのメモリ確保

		if (pScore != NULL)
		{//	スコアのメモリが確保出来たら
			pScore->Init();				//	スコアの初期化処理
		}
		else
		{
		}
	}
	return pScore;
}

//==============================================================================
//	スコアの取得
//==============================================================================
int  CScore::GetScore(void)
{
	return m_nScore;
}

//==============================================================================
//	スコアの設定
//==============================================================================
void  CScore::AddScore(int nValue)
{
	int aNumber[MAX_SCORE];

	m_nScore += nValue;

	aNumber[0] = m_nScore / 100000000 / 10000000;
	aNumber[1] = m_nScore % 10000000 / 1000000;
	aNumber[2] = m_nScore % 1000000 / 100000;
	aNumber[3] = m_nScore % 100000 / 10000;
	aNumber[4] = m_nScore % 10000 / 1000;
	aNumber[5] = m_nScore % 1000 / 100;
	aNumber[6] = m_nScore % 100 / 10;
	aNumber[7] = m_nScore % 10 / 1;

	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount]->SetNumber(aNumber[nCount]);
	}
}